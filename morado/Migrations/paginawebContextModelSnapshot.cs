// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using morado.Models.dbModels;

#nullable disable

namespace morado.Migrations
{
    [DbContext(typeof(paginawebContext))]
    partial class paginawebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("morado.Models.dbModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("date");

                    b.Property<string>("FotoDePerfil")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("morado.Models.dbModels.Contenido", b =>
                {
                    b.Property<int>("IdContenido")
                        .HasColumnType("int");

                    b.Property<int>("IdDirectorio")
                        .HasColumnType("int");

                    b.Property<int>("IdGeneros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImagenDelContenido")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Vistas")
                        .HasColumnType("int");

                    b.HasKey("IdContenido");

                    b.HasIndex("IdDirectorio");

                    b.HasIndex("IdGeneros");

                    b.ToTable("Contenido");
                });

            modelBuilder.Entity("morado.Models.dbModels.Directorio", b =>
                {
                    b.Property<int>("IdDirectorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDirectorio"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdDirectorio");

                    b.ToTable("Directorio");
                });

            modelBuilder.Entity("morado.Models.dbModels.DondeVer", b =>
                {
                    b.Property<int>("IdComentarios")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdContenido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdComentarios");

                    b.HasIndex("IdContenido");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Donde ver");
                });

            modelBuilder.Entity("morado.Models.dbModels.Episodio", b =>
                {
                    b.Property<int>("IdEpisodios")
                        .HasColumnType("int");

                    b.Property<int>("IdTempora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeroDeEpisodios")
                        .HasColumnType("int");

                    b.HasKey("IdEpisodios");

                    b.HasIndex("IdTempora");

                    b.ToTable("Episodios");
                });

            modelBuilder.Entity("morado.Models.dbModels.Genero", b =>
                {
                    b.Property<int>("IdGeneros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGeneros"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdGeneros");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("morado.Models.dbModels.Opinione", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdContenido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EstrellasDadas15")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("EstrellasDadas(1-5)");

                    b.Property<DateTime>("FechaDePublicado")
                        .HasColumnType("date");

                    b.HasKey("IdUsuario", "IdContenido");

                    b.HasIndex("IdContenido");

                    b.ToTable("Opiniones");
                });

            modelBuilder.Entity("morado.Models.dbModels.Tempora", b =>
                {
                    b.Property<int>("IdTemporadas")
                        .HasColumnType("int");

                    b.Property<int>("IdContenido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumerodeTemporadas")
                        .HasColumnType("int");

                    b.HasKey("IdTemporadas");

                    b.HasIndex("IdContenido");

                    b.ToTable("Tempora");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("morado.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("morado.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("morado.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("morado.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("morado.Models.dbModels.Contenido", b =>
                {
                    b.HasOne("morado.Models.dbModels.Directorio", "IdDirectorioNavigation")
                        .WithMany("Contenidos")
                        .HasForeignKey("IdDirectorio")
                        .IsRequired()
                        .HasConstraintName("FK_Contenido_Directorio");

                    b.HasOne("morado.Models.dbModels.Genero", "IdGenerosNavigation")
                        .WithMany("Contenidos")
                        .HasForeignKey("IdGeneros")
                        .IsRequired()
                        .HasConstraintName("FK_Contenido_Generos");

                    b.Navigation("IdDirectorioNavigation");

                    b.Navigation("IdGenerosNavigation");
                });

            modelBuilder.Entity("morado.Models.dbModels.DondeVer", b =>
                {
                    b.HasOne("morado.Models.dbModels.Contenido", "IdContenidoNavigation")
                        .WithMany("DondeVers")
                        .HasForeignKey("IdContenido")
                        .IsRequired()
                        .HasConstraintName("FK_Donde ver_Contenido");

                    b.HasOne("morado.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("DondeVers")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Donde ver_Usuario");

                    b.Navigation("IdContenidoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("morado.Models.dbModels.Episodio", b =>
                {
                    b.HasOne("morado.Models.dbModels.Tempora", "IdTemporaNavigation")
                        .WithMany("Episodios")
                        .HasForeignKey("IdTempora")
                        .IsRequired()
                        .HasConstraintName("FK_Episodios_Tempora");

                    b.Navigation("IdTemporaNavigation");
                });

            modelBuilder.Entity("morado.Models.dbModels.Opinione", b =>
                {
                    b.HasOne("morado.Models.dbModels.Contenido", "IdContenidoNavigation")
                        .WithMany("Opiniones")
                        .HasForeignKey("IdContenido")
                        .IsRequired()
                        .HasConstraintName("FK_Opiniones_Contenido");

                    b.HasOne("morado.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Opiniones")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Opiniones_Usuario");

                    b.Navigation("IdContenidoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("morado.Models.dbModels.Tempora", b =>
                {
                    b.HasOne("morado.Models.dbModels.Contenido", "IdContenidoNavigation")
                        .WithMany("Temporas")
                        .HasForeignKey("IdContenido")
                        .IsRequired()
                        .HasConstraintName("FK_Tempora_Contenido");

                    b.Navigation("IdContenidoNavigation");
                });

            modelBuilder.Entity("morado.Models.dbModels.ApplicationUser", b =>
                {
                    b.Navigation("DondeVers");

                    b.Navigation("Opiniones");
                });

            modelBuilder.Entity("morado.Models.dbModels.Contenido", b =>
                {
                    b.Navigation("DondeVers");

                    b.Navigation("Opiniones");

                    b.Navigation("Temporas");
                });

            modelBuilder.Entity("morado.Models.dbModels.Directorio", b =>
                {
                    b.Navigation("Contenidos");
                });

            modelBuilder.Entity("morado.Models.dbModels.Genero", b =>
                {
                    b.Navigation("Contenidos");
                });

            modelBuilder.Entity("morado.Models.dbModels.Tempora", b =>
                {
                    b.Navigation("Episodios");
                });
#pragma warning restore 612, 618
        }
    }
}
